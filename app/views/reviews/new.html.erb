<div class="max-w-2xl mx-auto px-4 py-8">
  <div class="bg-white rounded-lg shadow-md p-6">
    <h1 class="text-2xl font-bold mb-6">Write a Review</h1>

    <div class="flex items-center space-x-4 mb-6 pb-6 border-b">
      <% if @product.images.any? %>
        <%= image_tag @product.images.first, class: "w-16 h-16 object-cover rounded-lg" %>
      <% else %>
        <div class="w-16 h-16 bg-gray-200 rounded-lg flex items-center justify-center">
          <span class="text-gray-500 text-xs">No image</span>
        </div>
      <% end %>

      <div>
        <h2 class="font-semibold text-lg"><%= @product.name %></h2>
        <p class="text-gray-600">$<%= @product.price %></p>
      </div>
    </div>

    <%= form_with model: [@product, @review], local: true, class: "space-y-6" do |form| %>
      <% if @review.errors.any? %>
        <div class="bg-red-50 border border-red-200 rounded-md p-4">
          <div class="flex">
            <div class="flex-shrink-0">
              <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
              </svg>
            </div>
            <div class="ml-3">
              <h3 class="text-sm font-medium text-red-800">
                There were <%= pluralize(@review.errors.count, "error") %> with your review:
              </h3>
              <div class="mt-2 text-sm text-red-700">
                <ul class="list-disc list-inside space-y-1">
                  <% @review.errors.full_messages.each do |message| %>
                    <li><%= message %></li>
                  <% end %>
                </ul>
              </div>
            </div>
          </div>
        </div>
      <% end %>

      <div>
        <%= form.label :rating, "Rating", class: "block text-sm font-medium text-gray-700 mb-2" %>
        <div class="flex items-center space-x-2" id="star-rating">
          <% 5.times do |i| %>
            <label class="cursor-pointer star-label" data-rating="<%= i + 1 %>">
              <%= form.radio_button :rating, i + 1, class: "sr-only rating-radio", id: "rating_#{i + 1}" %>
              <svg class="w-8 h-8 text-gray-300 transition-colors rating-star"
                   data-rating="<%= i + 1 %>"
                   fill="currentColor"
                   viewBox="0 0 20 20">
                <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
              </svg>
            </label>
          <% end %>
          <span class="ml-2 text-sm text-gray-600" id="rating-text">Select a rating</span>
        </div>
      </div>      <div>
        <%= form.label :title, "Review Title", class: "block text-sm font-medium text-gray-700 mb-2" %>
        <%= form.text_field :title,
            class: "w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500",
            placeholder: "Sum up your review in a few words" %>
      </div>

      <div>
        <%= form.label :content, "Your Review", class: "block text-sm font-medium text-gray-700 mb-2" %>
        <%= form.text_area :content,
            rows: 6,
            class: "w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500",
            placeholder: "Tell others about your experience with this product..." %>
      </div>

      <div class="flex items-center justify-between pt-6">
        <%= link_to @product, class: "text-gray-600 hover:text-gray-800" do %>
          ‚Üê Back to Product
        <% end %>

        <div class="flex space-x-3">
          <%= form.submit "Submit Review",
              class: "btn btn-primary" %>
        </div>
      </div>
    <% end %>
  </div>
</div>

<script>
function initializeStarRating() {
  const stars = document.querySelectorAll('.rating-star')
  const labels = document.querySelectorAll('.star-label')
  const ratingText = document.getElementById('rating-text')
  const starContainer = document.getElementById('star-rating')
  const ratingLabels = ['Select a rating', 'Poor', 'Fair', 'Good', 'Very Good', 'Excellent']

  // Don't initialize if elements don't exist or already initialized
  if (!stars.length || !labels.length || starContainer.dataset.initialized) {
    return
  }

  // Mark as initialized to prevent double initialization
  starContainer.dataset.initialized = 'true'

  let selectedRating = 0

  function updateStarDisplay(rating) {
    stars.forEach((star, index) => {
      const starElement = star
      if (index < rating) {
        starElement.classList.remove('text-gray-300')
        starElement.classList.add('text-yellow-400')
      } else {
        starElement.classList.remove('text-yellow-400')
        starElement.classList.add('text-gray-300')
      }
    })
  }

  function resetToSelected() {
    updateStarDisplay(selectedRating)
    if (selectedRating > 0) {
      ratingText.textContent = ratingLabels[selectedRating]
    } else {
      ratingText.textContent = ratingLabels[0]
    }
  }

  // Handle hover and click events on both stars and labels
  labels.forEach((label, index) => {
    const star = stars[index]
    const rating = index + 1

    // Handle hover on labels (which contain the stars)
    label.addEventListener('mouseenter', function() {
      updateStarDisplay(rating)
      ratingText.textContent = ratingLabels[rating]
    })

    // Also handle hover directly on stars for better responsiveness
    star.addEventListener('mouseenter', function() {
      updateStarDisplay(rating)
      ratingText.textContent = ratingLabels[rating]
    })

    // Handle clicks on labels
    label.addEventListener('click', function(e) {
      selectedRating = rating

      // Update radio button
      const radioButton = document.getElementById(`rating_${rating}`)
      radioButton.checked = true

      // Update star appearance
      updateStarDisplay(rating)

      // Update text
      ratingText.textContent = ratingLabels[rating]
    })

    // Also handle direct clicks on stars for better UX
    star.addEventListener('click', function(e) {
      e.preventDefault()
      e.stopPropagation()

      selectedRating = rating

      // Update radio button
      const radioButton = document.getElementById(`rating_${rating}`)
      radioButton.checked = true

      // Update star appearance
      updateStarDisplay(rating)

      // Update text
      ratingText.textContent = ratingLabels[rating]
    })
  })

  // Reset to selected rating on mouse leave from the entire container
  starContainer.addEventListener('mouseleave', resetToSelected)

  // Initialize display
  updateStarDisplay(0)
}

// Initialize on page load and Turbo navigation
document.addEventListener('DOMContentLoaded', initializeStarRating)
document.addEventListener('turbo:load', initializeStarRating)
document.addEventListener('turbo:render', initializeStarRating)
</script>
